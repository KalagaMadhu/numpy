import numpy as np


#addition
first_array=np.array([1,3,5,7])
second_array=np.array([2,4,6,8])
result1=first_array+second_array
print("using the + operator:",result1)
result2=np.add(first_array,second_array)
print("using the add function():",result2)


#subtraction
first_array=np.array([3,9,27,81])
second_array=np.array([2,4,8,16])
result1=first_array-second_array
print("using the - operator:",result1)
result2=np.subtract(first_array,second_array)
print("using the subtract function():",result2)


#mutiply
first_array=np.array([3,9,27,81])
second_array=np.array([2,4,8,16])
result3=first_array*second_array
print("using the * operator:",result3)
result4=np.multiply(first_array,second_array)
print("using the multiply function():",result4)


#divide
first_array=np.array([3,9,27,81])
second_array=np.array([2,4,8,16])
result3=first_array/second_array
print("using the / operator:",result3)
result3=np.divide(first_array,second_array)
print("using the divide function():",result3)

#power
array1=np.array([3,9,27,81])
result1=array1**2
print("using the ** operator",result1)
result2=np.power(array1,2)
print("using the power function()",result2)

#modulo
first_array=np.array([3,9,27,81])
second_array=np.array([2,4,8,16])
result3=first_array%second_array
print("using the % operator:",result3)
result3=np.mod(first_array,second_array)
print("using the modulo function():",result3)

#array functions
array1=np.array([1,3,5])
print("np.array():\n",array1)
array2=np.zeros((3,3))
print("\n np,zeroes:",array2)


array3=np.ones((2,4))
print("\n np.ones():",array3)

array1=np.array([1,3,5,7,9,11])
print("original array:\n",array1)


array2=np.reshape(array1,(2,3))
print("reshaped array:\n",array2)


array3=np.transpose(array2)
print("transpose array:\n",array3)


marks=np.array([76,78,81,66,85])
median_marks=np.median(marks)
print("median:",median_marks)


#logical opertors

array1=([1,2,3])
array2=([3,2,1])
result1=array1<array2
print("array1<array2",result1)

array1=([1,2,3])
array2=([3,2,1])
result1=array1>array2
print("array1>array2",result1)


array1=([1,2,3])
array2=([3,2,1])
result=np.less(array1,array2)
print("using  less  :",result)
result=np.less_equal(array1,array2)
print("using   less_equal :",result)
result=np.greater(array1,array2)
print("using greater   :",result)

result=np.greater_equal(array1,array2)
print("using greater_equal:",result)

result=np.equal(array1,array2)
print("using equal :",result)

result=np.not_equal(array1,array2)
print("using not_equal :",result)

x1=np.array([True,False,True])
x2=np.array([False,False,True])
print(np.logical_and(x1,x2))
print(np.logical_or(x1,x2))
print(np.logical_not(x1,x2))


#ROUNDING function
numbers=np.array([1.23456,2.34567,3.45678,4.56789])
round_array=np.round(numbers,2)
print(round_array)

array1=np.array([1.23456,2.34567,3.45678,4.56789])
print("Array after floor():",np.floor(array1))
print("Array after ceil():",np.ceil(array1))

#2d array
array1=np.array([[2,4,6],[8,10,12],[14,16,18]])
result1=np.median(array1,axis=1)
print("Median  along horizontal axis:",result1)
result2=np.median(array1,axis=0)
print("Median  along vertical axis:",result2)
result3=np.median(array1)
print("Median  along entire array:",result3)

#standard deviation
array1=np.array([[2,5,9],[3,8,11],[4,6,7]])
result1=np.std(array1,axis=1)
print("std along horizontal axis:",result1)
result2=np.std(array1,axis=0)
print("std  along vertical axis:",result2)
result3=np.std(array1)
print("std  along entire array:",result3)

#string function in arrays
array1=np.array(["iphone:","price:"])
array2=np.array(["15","$900"])
#element-wise concatenation
result=np.char.add(array1,array2)
print(result)


array1=(['A','B','C'])
result=np.char.multiply(array1,2)
print(result)

array1=np.array(['eric','paul','sean'])
result=np.char.capitalize(array1)
print(result)

array1=np.array(['nEpalI','AmeriCAN','CaNaDiAn'])
result=np.char.upper(array1)
print(result)

array1=np.array(['nEpalI','AmeriCAN','CaNaDiAn'])
result=np.char.lower(array1)
print(result)

array1=(['c','python','swift'])
array2=(['c++','python','java'])
result=np.char.equal(array1,array2)
print(result)


array1=(['c','python','swift'])
array2=(['c++','python','java'])
result=np.char.not_equal(array1,array2)
print(result)

#array indexing
arr=np.array([1,2,3,4])
print("first element in array",arr[0])
print("sum of last two digits",arr[2]+arr[3])

arr=np.array([1,2,3,4,5,6,7])
print("slicing the elements from 1to 4",arr[1:5])
print("slicing the elements from 4 to end",arr[4:])
print("slicing the elements from start to 3",arr[:4])

import matplotlib.pyplot as plt
plt.plot([1,2,3,4],[10,20,25,30])
plt.xlim(0,5)
plt.ylim(0,35)
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.title('Sample plot')
plt.show()

import matplotlib.pyplot as plt
plt.plot([1,2,3,4],[10,20,25,30])
plt.xlim(0,5)
plt.ylim(0,35)
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.title('Sample plot')
plt.show()

import matplotlib.pyplot as plt
year=[1,2,3]
veg_rate=[2,4,6]
milk_rate=[1,3,5]
fruit_rate=[3,6,9]
line1,=plt.plot(year,veg_rate)
line2,=plt.plot(year,milk_rate)
line3,=plt.plot(year,fruit_rate)
plt.legend([line1,line2,line3],['Veg','Milk','Fruit'])
plt.xlabel('year')
plt.ylabel('rate')
plt.show()
print("succesfully placed a legend on the Axes....")


import matplotlib.pyplot as plt
categories =['lion','horse','kangaroo']
values=[5,2,4]
plt.barh(categories,values)
plt.xlabel("categories")
plt.ylabel("values")
plt.title("basic vertical bar graph")
plt.show()

import matplotlib.pyplot as plt
import numpy as np
categories=['lion','horse','kangaroo']
values1=[15,24,30]
values2=[20,18,25]
bar_width=0.35
bar_positions1=np.arange(len(categories))
bar_positions2=bar_positions1+bar_width
plt.bar(bar_positions1,values1,width=bar_width,label='2021',color='skyblue')
plt.bar(bar_positions2,values2,width=bar_width,label='2022',color='orange')
plt.xlabel('categories')
plt.ylabel('values')
plt.title("Group Bar Graph")
plt.legend()
plt.show()
